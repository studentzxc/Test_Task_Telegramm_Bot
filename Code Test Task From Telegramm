Code From C# –†–∞–±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏–ª –ß–µ–±–æ—Ç–∞—Ä–µ–≤ –ê.–Æ.
–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–æ–ª—é—Ç 
–º–Ω–æ—é –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∏—á–∏ 
1- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ —Ç–æ–µ—Ç—Å—å –≤—ã –ø—Ä–æ—Å–∏—Ç–µ –±–æ—Ç–∞ —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º –∫–æ–≥–¥–∞ Usd –±—É–¥–µ—Ç 80 —Ä—É–±–ª–µ–π –ø–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤–∞–º –ø—Ä–∏–π–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 
2- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∞–ª—é—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–æ–µ—Å—Ç—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /usd –∏–ª–∏ /eur –≤–∞–º –≤—ã–ø–∞–¥—É—Ç –º–∏–Ω–∏ –≥—Ä–∞—Ñ–∏–∫–∏ 


using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Globalization;

public class CurrencyBot : IUpdateHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly HttpClient _httpClient = new HttpClient();
    private readonly Timer _notificationTimer;
    private readonly Timer _alertCheckTimer;
    private readonly string _connectionString;

    // –ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å
    private readonly HashSet<long> _authorizedAdmins = new HashSet<long>();
    private AdminState _adminState = AdminState.None;
    private readonly Dictionary<long, ExportParams> _exportSessions = new Dictionary<long, ExportParams>();

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    private enum AlertState
    {
        None,
        WaitingForCurrency,
        WaitingForCondition,
        WaitingForTargetValue
    }
    private readonly Dictionary<long, AlertState> _alertStates = new Dictionary<long, AlertState>();
    private readonly Dictionary<long, Alert> _alertSessions = new Dictionary<long, Alert>();

    // –ö—ç—à –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤
    private readonly Dictionary<string, List<CurrencyRateHistory>> _currencyHistory = new Dictionary<string, List<CurrencyRateHistory>>();
    private const int HISTORY_LENGTH = 24; // –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ 24 —á–∞—Å–∞

    public CurrencyBot(string botToken, string connectionString)
    {
        _botClient = new TelegramBotClient(botToken);
        _connectionString = connectionString;

        // –¢–∞–π–º–µ—Ä –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        _notificationTimer = new Timer(SendDailyNotifications, null,
            CalculateDelayToNextCheck(),
            TimeSpan.FromHours(24));

        // –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        _alertCheckTimer = new Timer(CheckAlerts, null, TimeSpan.Zero, TimeSpan.FromMinutes(5));
    }

    private TimeSpan CalculateDelayToNextCheck()
    {
        var now = DateTime.Now;
        var targetTime = new DateTime(now.Year, now.Month, now.Day, 10, 0, 0);
        return now < targetTime ? targetTime - now : targetTime.AddDays(1) - now;
    }

    public async Task RunBotAsync()
    {
        var receiverOptions = new ReceiverOptions();
        _botClient.StartReceiving(
            updateHandler: this,
            receiverOptions: receiverOptions,
            cancellationToken: CancellationToken.None
        );

        var me = await _botClient.GetMeAsync();
        Console.WriteLine($"–ë–æ—Ç @{me.Username} –∑–∞–ø—É—â–µ–Ω!");
        await Task.Delay(-1);
    }

    private async void SendDailyNotifications(object state)
    {
        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var query = "SELECT TelegramUserId, CurrencySub FROM Subscribers";
                using (var cmd = new SqlCommand(query, connection))
                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        long userId = reader.GetInt64(0);
                        string currency = reader.GetString(1);

                        try
                        {
                            decimal? rate = await GetCurrencyRate(currency);
                            if (rate.HasValue)
                            {
                                await _botClient.SendTextMessageAsync(
                                    userId,
                                    $"üè¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å {currency}: {rate.Value:F2} RUB"
                                );
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {userId}: {ex.Message}");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {ex.Message}");
        }
    }

    // ===================== –ü–†–û–í–ï–†–ö–ê –ê–õ–ï–†–¢–û–í =====================
    private async void CheckAlerts(object state)
    {
        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
                var query = "SELECT * FROM Alerts WHERE IsActive = 1";
                using (var cmd = new SqlCommand(query, connection))
                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        var alert = new Alert
                        {
                            Id = reader.GetInt32(0),
                            UserId = reader.GetInt64(1),
                            Currency = reader.GetString(2),
                            Condition = reader.GetString(3),
                            TargetValue = reader.GetDecimal(4),
                            CreatedAt = reader.GetDateTime(5)
                        };

                        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
                        decimal? rate = await GetCurrencyRate(alert.Currency);
                        if (!rate.HasValue) continue;

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
                        bool isTriggered = false;
                        if (alert.Condition == "<" && rate < alert.TargetValue)
                            isTriggered = true;
                        else if (alert.Condition == ">" && rate > alert.TargetValue)
                            isTriggered = true;

                        if (isTriggered)
                        {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            await _botClient.SendTextMessageAsync(
                                alert.UserId,
                                $"üö® –ê–õ–ï–†–¢! –ö—É—Ä—Å {alert.Currency} –¥–æ—Å—Ç–∏–≥ {rate.Value:F2} RUB\n" +
                                $"–í–∞—à–µ —É—Å–ª–æ–≤–∏–µ: {alert.Condition} {alert.TargetValue:F2}"
                            );

                            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
                            using (var updateConn = new SqlConnection(_connectionString))
                            {
                                await updateConn.OpenAsync();
                                var updateQuery = "UPDATE Alerts SET IsActive = 0 WHERE Id = @id";
                                using (var updateCmd = new SqlCommand(updateQuery, updateConn))
                                {
                                    updateCmd.Parameters.AddWithValue("@id", alert.Id);
                                    await updateCmd.ExecuteNonQueryAsync();
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {ex.Message}");
        }
    }

    // ===================== –ò–°–¢–û–†–ò–Ø –ö–£–†–°–û–í =====================
    private async Task SaveCurrencyRateToHistory(string currencyCode, decimal rate)
    {
        try
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            if (!_currencyHistory.ContainsKey(currencyCode))
            {
                _currencyHistory[currencyCode] = new List<CurrencyRateHistory>();
            }

            _currencyHistory[currencyCode].Add(new CurrencyRateHistory
            {
                Rate = rate,
                Timestamp = DateTime.Now
            });

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if (_currencyHistory[currencyCode].Count > HISTORY_LENGTH)
            {
                _currencyHistory[currencyCode].RemoveAt(0);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var query = "INSERT INTO CurrencyHistory (CurrencyCode, Rate, Timestamp) VALUES (@code, @rate, @timestamp)";
                using (var cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@code", currencyCode);
                    cmd.Parameters.AddWithValue("@rate", rate);
                    cmd.Parameters.AddWithValue("@timestamp", DateTime.Now);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {ex.Message}");
        }
    }

    private async Task<decimal?> GetCurrencyRate(string currencyCode)
    {
        // –î–ª—è —Ä—É–±–ª—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1
        if (currencyCode == "RUB")
            return 1m;

        try
        {
            var response = await _httpClient.GetStringAsync("https://www.cbr-xml-daily.ru/daily_json.js");
            var data = JsonConvert.DeserializeObject<CbrResponse>(response);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª—é—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ
            if (data?.Valute != null && data.Valute.TryGetValue(currencyCode.ToUpper(), out var currency))
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
                await SaveCurrencyRateToHistory(currencyCode, currency.Value);
                return currency.Value;
            }

            Console.WriteLine($"–í–∞–ª—é—Ç–∞ {currencyCode} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ API");
            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ API: {ex.Message}");
            return null;
        }
    }

    // ===================== –¢–ï–ö–°–¢–û–í–´–ô –ì–†–ê–§–ò–ö =====================
    private string GenerateTextChart(List<CurrencyRateHistory> history)
    {
        if (history == null || history.Count < 2) return string.Empty;

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        decimal min = history.Min(h => h.Rate);
        decimal max = history.Max(h => h.Rate);
        decimal range = max - min;

        // –î–ª—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        if (range < 0.1m) range = 1m;

        const int chartWidth = 10;
        var chart = new StringBuilder();
        chart.AppendLine("üìà –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:");

        foreach (var point in history)
        {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –≥—Ä–∞—Ñ–∏–∫–µ
            int position = (int)Math.Round((point.Rate - min) / range * (chartWidth - 1));
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞–º–µ–Ω—è–µ–º Math.Clamp
            position = Math.Max(0, Math.Min(position, chartWidth - 1));

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≥—Ä–∞—Ñ–∏–∫–∞
            chart.Append('[');
            for (int i = 0; i < chartWidth; i++)
            {
                chart.Append(i == position ? '‚ñ†' : ' ');
            }
            chart.Append($"] {point.Rate:F2} RUB\n");
        }

        return chart.ToString();
    }

    private async Task SendCurrencyRate(long chatId, string currencyCode)
    {
        var rate = await GetCurrencyRate(currencyCode);
        if (!rate.HasValue)
        {
            await _botClient.SendTextMessageAsync(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ üò¢");
            return;
        }

        var text = new StringBuilder();
        text.AppendLine($"üí∞ –ö—É—Ä—Å {currencyCode}: {rate.Value:F2} RUB");

        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
        if (_currencyHistory.TryGetValue(currencyCode, out var history) && history.Count > 1)
        {
            text.Append(GenerateTextChart(history));
        }

        await _botClient.SendTextMessageAsync(chatId, text.ToString());
    }

    // ===================== –ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢ =====================
    private async Task ConvertCurrency(long chatId, string messageText)
    {
        try
        {
            // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ "100 USD to RUB"
            var parts = messageText.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length < 4)
            {
                await _botClient.SendTextMessageAsync(chatId,
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: [—Å—É–º–º–∞] [–∏–∑ –≤–∞–ª—é—Ç—ã] to [–≤ –≤–∞–ª—é—Ç—É]\n–ü—Ä–∏–º–µ—Ä: 100 USD to RUB");
                return;
            }

            if (!decimal.TryParse(parts[0], NumberStyles.Any, CultureInfo.InvariantCulture, out decimal amount) || amount <= 0)
            {
                await _botClient.SendTextMessageAsync(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞");
                return;
            }

            string fromCurrency = parts[1].ToUpper();
            string toCurrency = parts[3].ToUpper();

            // –î–ª—è —Ä—É–±–ª—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å 1
            if (fromCurrency == "RUB" && toCurrency == "RUB")
            {
                await _botClient.SendTextMessageAsync(chatId,
                    $"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:\n{amount} RUB = {amount:F2} RUB\n–ö—É—Ä—Å: 1 RUB = 1 RUB");
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            decimal? fromRate = await GetCurrencyRate(fromCurrency);
            decimal? toRate = await GetCurrencyRate(toCurrency);

            // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤–∞–ª—é—Ç - —Ä—É–±–ª—å
            if (fromCurrency == "RUB")
            {
                fromRate = 1m;
            }
            if (toCurrency == "RUB")
            {
                toRate = 1m;
            }

            if (!fromRate.HasValue)
            {
                await _botClient.SendTextMessageAsync(chatId, $"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã {fromCurrency}");
                return;
            }

            if (!toRate.HasValue)
            {
                await _botClient.SendTextMessageAsync(chatId, $"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã {toCurrency}");
                return;
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Ä—É–±–ª–∏
            decimal result = (amount * fromRate.Value) / toRate.Value;

            await _botClient.SendTextMessageAsync(chatId,
                $"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:\n" +
                $"{amount} {fromCurrency} = {result:F2} {toCurrency}\n" +
                $"–ö—É—Ä—Å: 1 {fromCurrency} = {fromRate.Value:F2} RUB\n" +
                $"–ö—É—Ä—Å: 1 {toCurrency} = {toRate.Value:F2} RUB");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã");
        }
    }

    // ===================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–õ–ï–†–¢–ê–ú–ò =====================
    private async Task StartAlertCreation(long chatId)
    {
        _alertStates[chatId] = AlertState.WaitingForCurrency;
        _alertSessions[chatId] = new Alert { UserId = chatId };

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("USD") },
            new[] { InlineKeyboardButton.WithCallbackData("EUR") }
        });

        await _botClient.SendTextMessageAsync(
            chatId,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∞–ª–µ—Ä—Ç–∞:",
            replyMarkup: keyboard
        );
    }

    private async Task ShowUserAlerts(long chatId)
    {
        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var query = "SELECT * FROM Alerts WHERE UserId = @userId AND IsActive = 1";
                using (var cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@userId", chatId);
                    using (var reader = await cmd.ExecuteReaderAsync())
                    {
                        var sb = new StringBuilder();
                        sb.AppendLine("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:");

                        if (!reader.HasRows)
                        {
                            sb.AppendLine("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤");
                        }

                        while (await reader.ReadAsync())
                        {
                            string currency = reader.GetString(2);
                            string condition = reader.GetString(3);
                            decimal targetValue = reader.GetDecimal(4);
                            DateTime createdAt = reader.GetDateTime(5);

                            sb.AppendLine($"- {currency} {condition} {targetValue:F2} (—Å–æ–∑–¥–∞–Ω {createdAt:dd.MM.yyyy})");
                        }

                        await _botClient.SendTextMessageAsync(chatId, sb.ToString());
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤");
        }
    }

    public async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken ct)
    {
        try
        {
            if (update.Type == UpdateType.Message)
            {
                await HandleMessageAsync(update.Message);
            }
            else if (update.Type == UpdateType.CallbackQuery)
            {
                await HandleCallbackQueryAsync(update.CallbackQuery);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex.Message}");
        }
    }

    public Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken ct)
    {
        Console.WriteLine($"–û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞: {exception.Message}");
        return Task.CompletedTask;
    }

    private async Task HandleMessageAsync(Message message)
    {
        if (message == null) return;

        Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ChatId={message.Chat.Id}, Type={message.Type}, Text={message.Text}");

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        if (message.Contact != null)
        {
            await HandleContactShared(message);
            return;
        }

        var chatId = message.Chat.Id;
        var text = message.Text;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if (_adminState == AdminState.WaitingExportDates && text != null)
        {
            await HandleCustomDatesInput(chatId, text);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        if (_alertStates.TryGetValue(chatId, out var alertState))
        {
            if (alertState == AlertState.WaitingForTargetValue && text != null)
            {
                if (decimal.TryParse(text, out decimal targetValue))
                {
                    var alert = _alertSessions[chatId];
                    alert.TargetValue = targetValue;

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç –≤ –ë–î
                    using (var connection = new SqlConnection(_connectionString))
                    {
                        await connection.OpenAsync();
                        var query = "INSERT INTO Alerts (UserId, Currency, Condition, TargetValue, IsActive) " +
                                    "VALUES (@userId, @currency, @condition, @targetValue, 1)";
                        using (var cmd = new SqlCommand(query, connection))
                        {
                            cmd.Parameters.AddWithValue("@userId", alert.UserId);
                            cmd.Parameters.AddWithValue("@currency", alert.Currency);
                            cmd.Parameters.AddWithValue("@condition", alert.Condition);
                            cmd.Parameters.AddWithValue("@targetValue", alert.TargetValue);
                            await cmd.ExecuteNonQueryAsync();
                        }
                    }

                    await _botClient.SendTextMessageAsync(chatId,
                        $"‚úÖ –ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n" +
                        $"{alert.Currency} {alert.Condition} {alert.TargetValue:F2}");

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    _alertStates.Remove(chatId);
                    _alertSessions.Remove(chatId);
                }
                else
                {
                    await _botClient.SendTextMessageAsync(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:");
                }
                return;
            }
        }

        if (text == null) return;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        if (_authorizedAdmins.Contains(chatId))
        {
            if (await HandleAdminCommand(chatId, text)) return;
        }

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        var command = text.Split(' ')[0].ToLower();

        switch (command)
        {
            case "/start":
                await SendWelcomeMessage(chatId);
                break;
            case "/usd":
                await SendCurrencyRate(chatId, "USD");
                break;
            case "/eur":
                await SendCurrencyRate(chatId, "EUR");
                break;
            case "/subscribe":
                await ShowCurrencySelection(chatId);
                break;
            case "/unsubscribe":
                await UnsubscribeUser(chatId);
                break;
            case "/mysettings":
                await ShowUserSettings(chatId);
                break;
            case "/admin":
                await RequestAdminContact(chatId);
                break;
            // –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            case "/setalert":
                await StartAlertCreation(chatId);
                break;
            case "/myalerts":
                await ShowUserAlerts(chatId);
                break;
            case "/convert":
                await ConvertCurrency(chatId, text);
                break;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞–º–µ–Ω–∞ Contains –Ω–∞ IndexOf
        if (text.Split(' ').Length >= 4 &&
            text.IndexOf("to", StringComparison.OrdinalIgnoreCase) >= 0 &&
            decimal.TryParse(text.Split(' ')[0], out _))
        {
            await ConvertCurrency(chatId, text);
        }
    }

    private async Task<bool> HandleAdminCommand(long chatId, string text)
    {
        var command = text.Split(' ')[0].ToLower();

        switch (command)
        {
            case "/subscribers":
                await ShowSubscribers(chatId);
                return true;

            case "/export":
                // –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞
                _adminState = AdminState.WaitingExportCurrency;
                _exportSessions[chatId] = new ExportParams();
                await ShowCurrencySelectionForExport(chatId);
                return true;

            case "/back":
                await ResetAdminState(chatId);
                await ShowAdminMenu(chatId);
                return true;
        }

        return false;
    }

    private async Task ShowCurrencySelectionForExport(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("USD", "export_usd"),
                InlineKeyboardButton.WithCallbackData("EUR", "export_eur")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–í—Å–µ –≤–∞–ª—é—Ç—ã", "export_all")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–û—Ç–º–µ–Ω–∞", "export_cancel")
            }
        });

        await _botClient.SendTextMessageAsync(
            chatId,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            replyMarkup: keyboard
        );
    }

    private async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery)
    {
        var data = callbackQuery.Data;
        var chatId = callbackQuery.From.Id;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (data == "USD" || data == "EUR")
        {
            try
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    var checkQuery = "SELECT COUNT(*) FROM Subscribers WHERE TelegramUserId = @userId";
                    using (var checkCmd = new SqlCommand(checkQuery, connection))
                    {
                        checkCmd.Parameters.AddWithValue("@userId", chatId);
                        int exists = (int)await checkCmd.ExecuteScalarAsync();

                        if (exists > 0)
                        {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                            var updateQuery = "UPDATE Subscribers SET CurrencySub = @currency WHERE TelegramUserId = @userId";
                            using (var updateCmd = new SqlCommand(updateQuery, connection))
                            {
                                updateCmd.Parameters.AddWithValue("@currency", data);
                                updateCmd.Parameters.AddWithValue("@userId", chatId);
                                await updateCmd.ExecuteNonQueryAsync();
                            }
                        }
                        else
                        {
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                            var name = $"{callbackQuery.From.FirstName} {callbackQuery.From.LastName}";
                            var insertQuery = "INSERT INTO Subscribers (Name, CurrencySub, TelegramUserId) VALUES (@name, @currency, @userId)";
                            using (var insertCmd = new SqlCommand(insertQuery, connection))
                            {
                                insertCmd.Parameters.AddWithValue("@name", name);
                                insertCmd.Parameters.AddWithValue("@currency", data);
                                insertCmd.Parameters.AddWithValue("@userId", chatId);
                                await insertCmd.ExecuteNonQueryAsync();
                            }
                        }
                    }
                }

                await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {ex.Message}");
                await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
            }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        else if (data.StartsWith("export_"))
        {
            await HandleExportCallback(callbackQuery);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –∞–ª–µ—Ä—Ç–∞
        else if (_alertStates.TryGetValue(chatId, out var alertState) &&
                alertState == AlertState.WaitingForCurrency &&
                (data == "USD" || data == "EUR"))
        {
            _alertSessions[chatId].Currency = data;
            _alertStates[chatId] = AlertState.WaitingForCondition;

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("–ö—É—Ä—Å –Ω–∏–∂–µ", "<") },
                new[] { InlineKeyboardButton.WithCallbackData("–ö—É—Ä—Å –≤—ã—à–µ", ">") }
            });

            await _botClient.EditMessageTextAsync(
                chatId,
                callbackQuery.Message.MessageId,
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ:",
                replyMarkup: keyboard
            );
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–∞
        else if (alertState == AlertState.WaitingForCondition &&
                (data == "<" || data == ">"))
        {
            _alertSessions[chatId].Condition = data;
            _alertStates[chatId] = AlertState.WaitingForTargetValue;

            await _botClient.EditMessageTextAsync(
                chatId,
                callbackQuery.Message.MessageId,
                "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            );
        }
    }

    private async Task HandleExportCallback(CallbackQuery callbackQuery)
    {
        var chatId = callbackQuery.Message.Chat.Id;
        var data = callbackQuery.Data;

        if (!_exportSessions.TryGetValue(chatId, out var exportParams))
        {
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ");
            return;
        }

        try
        {
            switch (data)
            {
                case "export_usd":
                    exportParams.Currency = "USD";
                    break;

                case "export_eur":
                    exportParams.Currency = "EUR";
                    break;

                case "export_all":
                    exportParams.Currency = null;
                    break;

                case "export_today":
                    exportParams.StartDate = DateTime.Today;
                    exportParams.EndDate = DateTime.Today.AddDays(1);
                    await ExportSubscriptions(chatId, exportParams);
                    await ResetAdminState(chatId);
                    return;

                case "export_week":
                    exportParams.StartDate = DateTime.Today.AddDays(-7);
                    exportParams.EndDate = DateTime.Today.AddDays(1);
                    await ExportSubscriptions(chatId, exportParams);
                    await ResetAdminState(chatId);
                    return;

                case "export_month":
                    exportParams.StartDate = DateTime.Today.AddMonths(-1);
                    exportParams.EndDate = DateTime.Today.AddDays(1);
                    await ExportSubscriptions(chatId, exportParams);
                    await ResetAdminState(chatId);
                    return;

                case "export_all_time":
                    exportParams.StartDate = null;
                    exportParams.EndDate = null;
                    await ExportSubscriptions(chatId, exportParams);
                    await ResetAdminState(chatId);
                    return;

                case "export_custom":
                    _adminState = AdminState.WaitingExportDates;
                    await _botClient.EditMessageTextAsync(
                        chatId,
                        callbackQuery.Message.MessageId,
                        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î\n–ü—Ä–∏–º–µ—Ä: 2023-01-01 2023-12-31"
                    );
                    return;

                case "export_cancel":
                    await ResetAdminState(chatId);
                    await _botClient.EditMessageTextAsync(
                        chatId,
                        callbackQuery.Message.MessageId,
                        "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω"
                    );
                    return;
            }

            // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç
            _adminState = AdminState.WaitingExportPeriod;
            await _botClient.EditMessageTextAsync(
                chatId,
                callbackQuery.Message.MessageId,
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                replyMarkup: GetDateOptionsKeyboard()
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}");
            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
        }
    }

    private InlineKeyboardMarkup GetDateOptionsKeyboard()
    {
        return new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–°–µ–≥–æ–¥–Ω—è", "export_today"),
                InlineKeyboardButton.WithCallbackData("–ó–∞ –Ω–µ–¥–µ–ª—é", "export_week")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–ó–∞ –º–µ—Å—è—Ü", "export_month"),
                InlineKeyboardButton.WithCallbackData("–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", "export_all_time")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã", "export_custom"),
                InlineKeyboardButton.WithCallbackData("–û—Ç–º–µ–Ω–∞", "export_cancel")
            }
        });
    }

    private async Task ResetAdminState(long chatId)
    {
        _adminState = AdminState.None;
        _exportSessions.Remove(chatId);
    }

    private async Task HandleCustomDatesInput(long chatId, string text)
    {
        if (!_exportSessions.TryGetValue(chatId, out var exportParams))
        {
            await _botClient.SendTextMessageAsync(chatId, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ");
            return;
        }

        try
        {
            var dates = text.Split(' ');
            if (dates.Length != 2)
            {
                await _botClient.SendTextMessageAsync(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª");
                return;
            }

            if (DateTime.TryParse(dates[0], out DateTime startDate) &&
                DateTime.TryParse(dates[1], out DateTime endDate))
            {
                exportParams.StartDate = startDate;
                exportParams.EndDate = endDate.AddDays(1); // –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å
                await ExportSubscriptions(chatId, exportParams);
                await ResetAdminState(chatId);
            }
            else
            {
                await _botClient.SendTextMessageAsync(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç");
        }
    }

    private async Task SendWelcomeMessage(long chatId)
    {
        const string text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ü§ë\n\n" +
                            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                            "/usd - –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞\n" +
                            "/eur - –∫—É—Ä—Å –µ–≤—Ä–æ\n" +
                            "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n" +
                            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n" +
                            "/mysettings - –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n" +
                            "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n" +
                            "/setalert - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç\n" +
                            "/myalerts - –º–æ–∏ –∞–ª–µ—Ä—Ç—ã\n" +
                            "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç";

        await _botClient.SendTextMessageAsync(chatId, text);
    }

    private async Task ShowCurrencySelection(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new[] { InlineKeyboardButton.WithCallbackData("USD") },
            new[] { InlineKeyboardButton.WithCallbackData("EUR") }
        });

        await _botClient.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", replyMarkup: keyboard);
    }

    private async Task ShowUserSettings(long chatId)
    {
        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var query = "SELECT CurrencySub FROM Subscribers WHERE TelegramUserId = @userId";
                using (var cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@userId", chatId);
                    using (var reader = await cmd.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            var currency = reader.GetString(0);
                            await _botClient.SendTextMessageAsync(chatId, $"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {currency}");
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
        }
    }

    private async Task UnsubscribeUser(long chatId)
    {
        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var query = "DELETE FROM Subscribers WHERE TelegramUserId = @userId";
                using (var cmd = new SqlCommand(query, connection))
                {
                    cmd.Parameters.AddWithValue("@userId", chatId);
                    int rowsAffected = await cmd.ExecuteNonQueryAsync();

                    if (rowsAffected > 0)
                    {
                        await _botClient.SendTextMessageAsync(chatId, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ");
        }
    }

    // ===================== –ê–î–ú–ò–ù–°–ö–ê–Ø –ß–ê–°–¢–¨ =====================
    private async Task RequestAdminContact(long chatId)
    {
        var requestContactButton = new KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç") { RequestContact = true };
        var replyMarkup = new ReplyKeyboardMarkup(new[] { new[] { requestContactButton } })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = true
        };

        await _botClient.SendTextMessageAsync(
            chatId,
            "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            replyMarkup: replyMarkup
        );
    }

    private string NormalizePhoneNumber(string phone)
    {
        if (string.IsNullOrWhiteSpace(phone))
            return phone;

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        string digits = new string(phone.Where(char.IsDigit).ToArray());

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
        if (digits.Length == 11 && digits.StartsWith("7"))
            return "+" + digits;

        if (digits.Length == 11 && digits.StartsWith("8"))
            return "+7" + digits.Substring(1);

        return "+" + digits;
    }
    public async Task HandleContactShared(Message message)
    {
        if (message.Contact == null) return;

        var chatId = message.Chat.Id;
        var phone = NormalizePhoneNumber(message.Contact.PhoneNumber);

        Console.WriteLine($"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {phone}");

        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                var checkQuery = "SELECT COUNT(*) FROM Admins WHERE PhoneNumber = @phone";
                using (var checkCmd = new SqlCommand(checkQuery, connection))
                {
                    checkCmd.Parameters.AddWithValue("@phone", phone);
                    int adminCount = (int)await checkCmd.ExecuteScalarAsync();

                    Console.WriteLine($"–ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º {phone}: {adminCount}");

                    if (adminCount > 0)
                    {
                        _authorizedAdmins.Add(chatId);
                        await _botClient.SendTextMessageAsync(
                            chatId,
                            "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                            replyMarkup: new ReplyKeyboardRemove()
                        );
                        await ShowAdminMenu(chatId);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId,
                            "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
                            replyMarkup: new ReplyKeyboardRemove()
                        );
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞: {ex}");
            await _botClient.SendTextMessageAsync(
                chatId,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                replyMarkup: new ReplyKeyboardRemove()
            );
        }
    }
    private async Task ShowAdminMenu(long chatId)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new[] { new KeyboardButton("/subscribers") },
            new[] { new KeyboardButton("/export") },
            new[] { new KeyboardButton("/back") }
        })
        {
            ResizeKeyboard = true
        };

        await _botClient.SendTextMessageAsync(
            chatId,
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n" +
            "/subscribers - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n" +
            "/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n" +
            "/back - –Ω–∞–∑–∞–¥",
            replyMarkup: keyboard
        );
    }

    private async Task ShowSubscribers(long chatId)
    {
        try
        {
            var sb = new StringBuilder();
            sb.AppendLine("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:");
            sb.AppendLine("------------------");

            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var query = "SELECT Name, CurrencySub, SubscriptionDate FROM Subscribers";
                using (var cmd = new SqlCommand(query, connection))
                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        string name = reader.GetString(0);
                        string currency = reader.GetString(1);
                        DateTime subDate = reader.GetDateTime(2);

                        sb.AppendLine($"üë§ –ò–º—è: {name}");
                        sb.AppendLine($"üí± –í–∞–ª—é—Ç–∞: {currency}");
                        sb.AppendLine($"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {subDate:dd.MM.yyyy}");
                        sb.AppendLine();
                    }
                }
            }

            if (sb.Length > 0)
            {
                await _botClient.SendTextMessageAsync(chatId, sb.ToString());
            }
            else
            {
                await _botClient.SendTextMessageAsync(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤");
        }
    }

    private async Task ExportSubscriptions(long chatId, ExportParams exportParams)
    {
        try
        {
            var sb = new StringBuilder();
            sb.AppendLine("UserID;Name;Currency;SubscriptionDate");

            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();
                var query = new StringBuilder("SELECT Id, Name, CurrencySub, SubscriptionDate FROM Subscribers WHERE 1=1");

                // –§–∏–ª—å—Ç—Ä –ø–æ –≤–∞–ª—é—Ç–µ
                if (!string.IsNullOrEmpty(exportParams.Currency))
                {
                    query.Append(" AND CurrencySub = @currency");
                }

                // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
                if (exportParams.StartDate.HasValue && exportParams.EndDate.HasValue)
                {
                    query.Append(" AND SubscriptionDate BETWEEN @startDate AND @endDate");
                }

                using (var cmd = new SqlCommand(query.ToString(), connection))
                {
                    if (!string.IsNullOrEmpty(exportParams.Currency))
                    {
                        cmd.Parameters.AddWithValue("@currency", exportParams.Currency);
                    }

                    if (exportParams.StartDate.HasValue && exportParams.EndDate.HasValue)
                    {
                        cmd.Parameters.AddWithValue("@startDate", exportParams.StartDate);
                        cmd.Parameters.AddWithValue("@endDate", exportParams.EndDate);
                    }

                    using (var reader = await cmd.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            int id = reader.GetInt32(0);
                            string name = reader.GetString(1);
                            string currency = reader.GetString(2);
                            DateTime subDate = reader.GetDateTime(3);

                            sb.AppendLine($"{id};{name};{currency};{subDate:yyyy-MM-dd}");
                        }
                    }
                }
            }

            if (sb.Length > 30)
            {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                var tempFile = Path.GetTempFileName() + ".csv";
                System.IO.File.WriteAllText(tempFile, sb.ToString(), Encoding.UTF8);

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                using (var stream = System.IO.File.OpenRead(tempFile))
                {
                    await _botClient.SendDocumentAsync(
                        chatId,
                        new Telegram.Bot.Types.InputFiles.InputOnlineFile(stream, "subscriptions.csv"),
                        "–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
                    );
                }

                System.IO.File.Delete(tempFile);
            }
            else
            {
                await _botClient.SendTextMessageAsync(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {ex.Message}");
            await _botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö");
        }
    }
}

public class ExportParams
{
    public string Currency { get; set; }
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
}

public enum AdminState
{
    None,
    WaitingExportCurrency,
    WaitingExportPeriod,
    WaitingExportDates
}

public class CbrResponse
{
    public Dictionary<string, CurrencyInfo> Valute { get; set; }
}

public class CurrencyInfo
{
    public decimal Value { get; set; }
}


public class Alert
{
    public int Id { get; set; }
    public long UserId { get; set; }
    public string Currency { get; set; } // "USD", "EUR"
    public string Condition { get; set; } // "<", ">"
    public decimal TargetValue { get; set; }
    public bool IsActive { get; set; } = true;
    public DateTime CreatedAt { get; set; } = DateTime.Now;
}

public class CurrencyRateHistory
{
    public decimal Rate { get; set; }
    public DateTime Timestamp { get; set; }
}

public class Program
{
    public static async Task Main()
    {
        Console.WriteLine("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        string botToken = Environment.GetEnvironmentVariable("BOT_TOKEN") ?? "7161824860:AAHXWqRszRhT5Z4Ti5Eu2vuGC40XLAsQ1mI";
        string connectionString = Environment.GetEnvironmentVariable("DB_CONNECTION") ?? "Server=DESKTOP-2A9H5QL;Database=Telegramm Test Task;Integrated Security=True;";

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
       

        var bot = new CurrencyBot(botToken, connectionString);
        await bot.RunBotAsync();
    }

 
    }
